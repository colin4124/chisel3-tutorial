* 搭建开发环境
** 安装 scratchip
#+begin_src bash
pip3 install scratchip
#+end_src

** 使用 scratchip 创建开发环境
#+begin_src bash
  scratchip create foo
  cd foo
  make verilog
#+end_src

生成的 ~verilog~ 放在 ~builds/~ 目录下。

* 前置知识：Scala 语法
** 变量
通过 ~var~ 或者 ~val~ 来声明变量。 ~val~ 声明不可变的， ~var~ 声明可修改的。

#+begin_src scala
  val x = 10 // x 现在是 10
  x = 20     // 错误：对 val 声明的变量重新赋值
  var y = 10
  y = 20     // 正确：对 var 声明的变量可以重新赋值，现在 y 是 20
#+end_src

**Scala** 是静态语言，上面的声明方式并没有指定类型。因为 scala 编译器可以推测变量的类型。也可以像下面这样声明：

#+begin_src scala
  val z: Int = 10
  var a: Double = 1.0
  // 注意：从 Int 到 Double 会自动转换类型，b 是 10.0，不是 10
  val b: Double = 10
#+end_src

** 函数
函数可以这样定义:

#+begin_src scala
  def functionName(args...): ReturnType = { body... }
#+end_src

如果您以前学习过传统的编程语言，注意 return 关键字的省略。Scala 中， 函数代码块最后一条表达式就是返回值。

#+begin_src scala
def sumOfSquares(x: Int, y: Int): Int = {
  val x2 = x * x
  val y2 = y * y
  x2 + y2
}
#+end_src

如果函数体是单行表达式，~{ }~ 可以省略：

#+begin_src scala
def sumOfSquaresShort(x: Int, y: Int): Int = x * x + y * y
#+end_src

函数调用的语法：

#+begin_src scala
sumOfSquares(3, 4)  // => 25
#+end_src

在多数情况下 (除了递归函数), 可以省略函数返回值，变量所用的类型推导一样会应用到函数返回值中：
#+begin_src scala
  def sq(x: Int) = x * x  // 编译器会推断得知返回值是 Int
#+end_src

函数可以有默认参数:
#+begin_src scala
def addWithDefault(x: Int, y: Int = 5) = x + y
addWithDefault(1, 2)  // => 3
addWithDefault(1)  // => 6
#+end_src

匿名函数是这样的：
#+begin_src scala
(x:Int) => x * x
#+end_src

和 ~def~ 不同，如果语义清晰，匿名函数的参数类型也可以省略。
类型 ~"Int => Int"~ 意味着这个函数接收一个 ~Int~ 并返回一个 ~Int~ 。

#+begin_src scala
val sq: Int => Int = x => x * x
#+end_src

匿名函数的调用也是类似的：
#+begin_src scala
sq(10)   // => 100
#+end_src

如果您的匿名函数中每个参数仅使用一次，Scala 提供一个更简洁的方式来定义他们。这样的匿名函数极为常见，

#+begin_src scala
val addOne: Int => Int = _ + 1
val weirdSum: (Int, Int) => Int = (_ * 2 + _ * 3)

addOne(5)  // => 6
weirdSum(2, 4)  // => 16
#+end_src

** 控制语句
#+begin_src scala
  1 to 5
  val r = 1 to 5

  // 下面两种写法等价
  r.foreach( println )
  r foreach println

  // 也可以一行写完
  (5 to 1 by -1) foreach ( println )
#+end_src

while 循环:

#+begin_src scala
  var i = 0
  while (i < 10) {  println("i " + i); i+=1  }

  while (i < 10) {  println("i " + i); i+=1  }   // 没错，再执行一次，发生了什么？为什么？

  i    // 显示 i 的值。注意 while 是经典的循环方式，它连续执行并改变循环中的变量。
       // while 执行很快，比 Java 的循环快，但像上面所看到的那样用组合子和推导式
       // 更易于理解和并行化。

#+end_src

do while 循环

#+begin_src scala
  do {
    println("x is still less than 10");
    x += 1
  } while (x < 10)
#+end_src

*** 条件语句

#+begin_src scala

val x = 10

if (x == 1) println("yeah")
if (x == 10) println("yeah")
if (x == 11) println("yeah")
if (x == 11) println ("yeah") else println("nay")

println(if (x == 10) "yeah" else "nope")
val text = if (x == 10) "yeah" else "nope"
#+end_src


** 数据结构
#+begin_src scala

val a = Array(1, 2, 3, 5, 8, 13)
a(0)
a(3)
a(21)    // 抛出异常

val m = Map("fork" -> "tenedor", "spoon" -> "cuchara", "knife" -> "cuchillo")
m("fork")
m("spoon")
m("bottle")       // 抛出异常

val safeM = m.withDefaultValue("no lo se")
safeM("bottle")

val s = Set(1, 3, 7)
s(0)
s(1)

/* 这里查看 map 的文档 -
 * http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Map
 * 并确保你会阅读
 */

#+end_src

元组

#+begin_src scala
(1, 2)

(4, 3, 2)

(1, 2, "three")

(a, 2, "three")

// 为什么有这个？
val divideInts = (x:Int, y:Int) => (x / y, x % y)

divideInts(10,3) // 函数 divideInts 同时返回结果和余数

// 要读取元组的元素，使用 _._n，n是从1开始的元素索引
val d = divideInts(10,3)

d._1

d._2
#+end_src

** 面向对象
教程中到现在为止我们所做的一切只是简单的表达式（值，函数等）。这些表达式可以输入到命令行解释器中作为快速测试，但它们不能独立存在于 Scala 文件。举个例子，您不能在 Scala 文件上简单的写上 "val x = 5"。相反 Scala 文件

允许的顶级结构是：

  - objects
  - classes
  - case classes
  - traits

现在来解释这些是什么。

*** 类
类和其他语言的类相似，构造器参数在类名后声明，初始化在类结构体中完成。

#+begin_src scala
class Dog(br: String) {
  // 构造器代码在此
  var breed: String = br

  // 定义名为 bark 的方法，返回字符串
  def bark = "Woof, woof!"

  // 值和方法作用域假定为 public。"protected" 和 "private" 关键字也是可用的。
  private def sleep(hours: Int) =
    println(s"I'm sleeping for $hours hours")

  // 抽象方法是没有方法体的方法。如果取消下面那行注释，Dog 类必须被声明为 abstract
  //   abstract class Dog(...) { ... }
  // def chaseAfter(what: String): String
}

val mydog = new Dog("greyhound")
println(mydog.breed) // => "greyhound"
println(mydog.bark) // => "Woof, woof!"
#+end_src

*** 单例对象

#+begin_src scala
  // "object" 关键字创造一种类型和该类型的单例。
  // Scala 的 class 常常也含有一个 “伴生对象”，class 中包含每个实例的行为，所有实例
  // 共用的行为则放入 object 中。两者的区别和其他语言中类方法和静态方法类似。
  // 请注意 object 和 class 可以同名。
  object Dog {
    def allKnownBreeds = List("pitbull", "shepherd", "retriever")
    def createDog(breed: String) = new Dog(breed)
  }
#+end_src

* 简单的例子：

编写一个模块分为以下几个部分：
1. 继承 ~RawModule~ 的类，默认情况下，用类的名字作为模块的名字；
2. 通过 ~IO()~ 声明模块的端口， ~Input~ 为输入， ~Output~ 为输出，里面是数据类型；
3. 子模块的声明， ~val 实例名 = Module(new 子模块类名)~ ;
4. 逻辑变量的声明，时序逻辑用 ~Reg(数据类型)~ , 或者 ~RegInit(带默认值的数据类型)~ ；组合逻辑用 ~Wire(数据类型)~ , 或者 ~WireInit(带默认值的数据类型)~ ;
5. 逻辑连线，用一系列运算操作后的结果，赋值给逻辑变量。 ~:=~ 为单向赋值，把右值赋值给左值， ~<>~ 为不区分方向的赋值，以及集合类数据类型的赋值。

下面举了几个例子。

** 二选一多路选择器

#+begin_src scala
  // 1. 继承了 RawModule， 默认名为 Top 的类
  class Top extends RawModule {
    // 2. 端口声明
    val sel = IO(Input(UInt(1.W)))
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 3. 内部没有子模块
    // 4. 内部没有逻辑变量，只用到了端口

    // 5. 逻辑连线，把 := 右边的一系列逻辑运算得到的结果，赋值给 := 左边的逻辑变量
    out := sel & in1 | ~sel & in0
  }
#+end_src

对应生成的 ~verilog~ 代码：

#+begin_src verilog
module Top(
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  assign out = sel & in1 | ~sel & in0;
endmodule
#+end_src

** 组合逻辑

#+begin_src scala
  // 1. 继承了 RawModule， 默认名为 Top 的类
  class Top extends RawModule {
    // 2. 端口声明
    val sel = IO(Input(UInt(1.W)))
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 3. 内部没有子模块
    // 4. 逻辑变量
    //    不带默认值的数据类型 Bool，如果下面的代码没有给它赋值，会报错
    val sel_in0 = Wire(Bool())
    //    带默认值的数据类型 Bool，如果下面的代码没有给它赋值，默认值为 0
    val sel_in1 = WireInit(0.B)

    // 5. 逻辑连线，把 := 右边的一系列逻辑运算得到的结果，赋值给 := 左边的逻辑变量
    sel_in0 := ~sel & in0
    sel_in1 := sel & in1
    out := sel_in1 | sel_in0
  }
#+end_src

#+begin_src verilog
module Top(
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  wire  sel_in0 = ~sel & in0;
  wire  sel_in1 = sel & in1;
  assign out = sel_in1 | sel_in0;
endmodule
#+end_src
** 时序逻辑
时序逻辑可以选择两种方式：1）使用默认的时钟和默认的同步复位；2）自定义的时钟和复位方式（同步还是异步上升沿有效）。

*** 默认方式
使用默认方式，模块类需要继承 ~Module~ ，它会默认提供名为 ~clock~ 的时钟，以及需要同步复位的话，会默认提供名为 ~reset~ 的同步复位。

只需要把之前的 ~Wire~ 和 ~WireInit~ 分别改成 ~Reg~ 和 ~RegInit~ 即可。

#+begin_src scala
  // 1. 继承了 Module， 默认名为 Top 的类
  class Top extends Module {
    // 2. 端口声明
    val sel = IO(Input(UInt(1.W)))
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 3. 内部没有子模块
    // 4. 逻辑变量
    //    不带默认值的数据类型 Bool，如果下面的代码没有给它赋值，会报错
    val sel_in0 = Reg(Bool())
    //    带默认值的数据类型 Bool，如果下面的代码没有给它赋值，默认值为 0
    val sel_in1 = RegInit(0.B)

    // 5. 逻辑连线，把 := 右边的一系列逻辑运算得到的结果，赋值给 := 左边的逻辑变量
    sel_in0 := ~sel & in0
    sel_in1 := sel & in1
    out := sel_in1 | sel_in0
  }
#+end_src

#+begin_src verilog
module Top(
  input   clock,
  input   reset,
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  reg  sel_in0;
  reg  sel_in1;
  assign out = sel_in1 | sel_in0;
  always @(posedge clock) begin
    sel_in0 <= ~sel & in0;
    if (reset) begin
      sel_in1 <= 1'h0;
    end else begin
      sel_in1 <= sel & in1;
    end
  end
endmodule
#+end_src

*** 自定义方式

使用自定义的方式，模块类需要继承 ~RawModule~ ，它不会提供任何的时钟和复位，需要自己定义，否则用到了时序逻辑的话，会报找不到时钟和复位的错误。

在声明 ~Reg~ 的时候，用 ~WithClock(自定义时钟名)~ ，声明 ~RegInit~ 的时候，用 ~withClockAndReset(自定义时钟名，自定义复位名)~ 。

当自定义复位的时候，怎么区别是同步复位，还是异步复位上升沿有效呢？取决于声明复位变量的类型是 ~Bool~ 还是 ~AsyncReset~ 。

#+begin_src scala
  // 1. 继承了 RawModule， 默认名为 Top 的类
  class Top extends RawModule {
    // 2. 端口声明
    val myclk  = IO(Input(Clock()))
    val myrst  = IO(Input(Bool()))
    val myrstn = IO(Input(AsyncReset()))

    val sel = IO(Input(UInt(1.W)))
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 3. 内部没有子模块
    // 4. 逻辑变量
    //    不带默认值的数据类型 Bool
    val sel_negative = withClock(myclk) { Reg(Bool()) }
    //    带默认值的数据类型 Bool，同步复位
    val sel_in0      = withClockAndReset(myclk, myrst) { RegInit(0.B) }
    //    带默认值的数据类型 Bool，异步复位上升沿有效
    val sel_in1      = withClockAndReset(myclk, myrstn) { RegInit(0.B) }

    // 5. 逻辑连线，把 := 右边的一系列逻辑运算得到的结果，赋值给 := 左边的逻辑变量
    sel_negative := ~sel

    sel_in0 := sel_negative & in0
    sel_in1 := sel & in1

    out := sel_in1 | sel_in0
  }
#+end_src

#+begin_src verilog
module Top(
  input   myclk,
  input   myrst,
  input   myrstn,
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  reg  sel_negative;
  reg  sel_in0;
  reg  sel_in1;
  assign out = sel_in1 | sel_in0;
  always @(posedge myclk) begin
    sel_negative <= ~sel;
    if (myrst) begin
      sel_in0 <= 1'h0;
    end else begin
      sel_in0 <= sel_negative & in0;
    end
  end
  always @(posedge myclk or posedge myrstn) begin
    if (myrstn) begin
      sel_in1 <= 1'h0;
    end else begin
      sel_in1 <= sel & in1;
    end
  end
endmodule
#+end_src

** 子模块

首先声明子模块 ~ALU~ ，跟上面的模块一样。

#+begin_src scala
  class ALU extends RawModule {
    // 1. 端口声明
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 2. 逻辑连线
    out := in0 | in1
  }
#+end_src

子模块的例化是 ~val alu = Module(new ALU)~ ，实例名为 ~alu~ ，子模块端口的引用 ~alu.端口名~ 。

#+begin_src scala
  // 1. 继承了 RawModule， 默认名为 Top 的类
  class Top extends RawModule {
    // 2. 端口声明
    val sel = IO(Input(UInt(1.W)))
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 3. 子模块
    val alu = Module(new ALU)

    // 4. 逻辑变量
    //    不带默认值的数据类型 Bool
    val sel_negative = Wire(Bool())
    //    带默认值的数据类型 Bool，同步复位
    val sel_in0      = WireInit(0.B)
    //    带默认值的数据类型 Bool，异步复位上升沿有效
    val sel_in1      = WireInit(0.B)

    // 5. 逻辑连线，把 := 右边的一系列逻辑运算得到的结果，赋值给 := 左边的逻辑变量
    sel_negative := ~sel

    sel_in0 := sel_negative & in0
    sel_in1 := sel & in1

    alu.in0 := sel_in0
    alu.in1 := sel_in1

    out := alu.out
  }
#+end_src

#+begin_src verilog
module ALU(
  input   in0,
  input   in1,
  output  out
);
  assign out = in0 | in1;
endmodule
module Top(
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  wire  alu_in0;
  wire  alu_in1;
  wire  alu_out;
  wire  sel_negative = ~sel;
  ALU alu (
    .in0(alu_in0),
    .in1(alu_in1),
    .out(alu_out)
  );
  assign out = alu_out;
  assign alu_in0 = sel_negative & in0;
  assign alu_in1 = sel & in1;
endmodule
#+end_src

** 外部模块
有时需要引用外部写好的模块， 此时需要声明好模块的名字和端口，不需要写内部的连线逻辑， ~chisel~ 会生成对应实例的端口连线逻辑，而不会再生成一个子模块。

外部模块继承的类是 ~BlackBox~ 和 ~ExtModule~ 。 ~BlackBox~ 一定要声明一个变量名为 ~io~ 且一定是集合类型  ~val io = IO(new Bundle { ... })~ ，但生成的端口会把 ~io~ 前缀去掉。

由于 ~BlackBox~ 这个奇怪的约束，作者一般都用 ~ExtModule~ 。

#+begin_src scala
  class ALU extends ExtModule {
    // 1. 端口声明
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 2. 外部模块不需要写逻辑连线
  }
#+end_src

把这里的 ~ALU~ 代码替换上面例子里的 ~ALU~ , 此时生成的 verilog 不会有 ALU 了。

#+begin_src verilog
module Top(
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  wire  alu_in0;
  wire  alu_in1;
  wire  alu_out;
  wire  sel_negative = ~sel;
  ALU alu (
    .in0(alu_in0),
    .in1(alu_in1),
    .out(alu_out)
  );
  assign out = alu_out;
  assign alu_in0 = sel_negative & in0;
  assign alu_in1 = sel & in1;
endmodule
#+end_src

如果外部模块带参数，可以给 ~ExtModule~ 传一个参数键值对 ~Map~ 。

#+begin_src scala
  class ALU(data_w: Int) extends ExtModule(Map("DW" -> data_w)) {
    // 1. 端口声明
    val in0 = IO(Input(UInt(data_w.W)))
    val in1 = IO(Input(UInt(data_w.W)))
    val out = IO(Output(UInt(data_w.W)))

    // 2. 外部模块不需要写逻辑连线
  }
  // 1. 继承了 RawModule， 默认名为 Top 的类

  class Top extends RawModule {
    // 2. 端口声明
    val sel = IO(Input(UInt(1.W)))
    val in0 = IO(Input(UInt(1.W)))
    val in1 = IO(Input(UInt(1.W)))
    val out = IO(Output(UInt(1.W)))

    // 3. 子模块
    val alu = Module(new ALU(1))

    // 4. 逻辑变量
    //    不带默认值的数据类型 Bool
    val sel_negative = Wire(Bool())
    //    带默认值的数据类型 Bool，同步复位
    val sel_in0      = WireInit(0.B)
    //    带默认值的数据类型 Bool，异步复位上升沿有效
    val sel_in1      = WireInit(0.B)

    // 5. 逻辑连线，把 := 右边的一系列逻辑运算得到的结果，赋值给 := 左边的逻辑变量
    sel_negative := ~sel

    sel_in0 := sel_negative & in0
    sel_in1 := sel & in1

    alu.in0 := sel_in0
    alu.in1 := sel_in1

    out := alu.out
  }
#+end_src

#+begin_src verilog
module Top(
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  wire  alu_in0;
  wire  alu_in1;
  wire  alu_out;
  wire  sel_negative = ~sel;
  ALU #(.DW(1)) alu (
    .in0(alu_in0),
    .in1(alu_in1),
    .out(alu_out)
  );
  assign out = alu_out;
  assign alu_in0 = sel_negative & in0;
  assign alu_in1 = sel & in1;
endmodule
#+end_src
* 基本数据类型

| 类型       | 说明                                         |
|------------+----------------------------------------------|
| Clock      | 时钟                                         |
| Bool       | 1 bit 信号，可用作同步复位                   |
| AsyncReset | 异步复位，上升沿有效                         |
| UInt       | 无符号整型，可设置位宽，比如 5-bit UInt(5.W) |
| SInt       | 有符号整型，5-bit SInt(5.W)                  |
| Analog     | 双向类型，一般用作模拟信号                   |

** 常量表示
#+begin_src scala
1.U       // decimal 1-bit lit from Scala Int.
"ha".U    // hexadecimal 4-bit lit from string.
"o12".U   // octal 4-bit lit from string.
"b1010".U // binary 4-bit lit from string.

5.S    // signed decimal 4-bit lit from Scala Int.
-8.S   // negative decimal 4-bit lit from Scala Int.
5.U    // unsigned decimal 3-bit lit from Scala Int.

8.U(4.W) // 4-bit unsigned decimal, value 8.
-152.S(32.W) // 32-bit signed decimal, value -152.

true.B // Bool lits from Scala lits.
false.B
#+end_src

下划线可用作分隔符：
#+begin_src scala
"h_dead_beef".U   // 32-bit lit of type UInt
#+end_src

* 运算类型
** 按位运算
对 ~SInt~, ~UInt~, ~Bool~ 有效。

| Operation                             | Explanation |
|---------------------------------------+-------------|
| val invertedX = ~x                    | Bitwise NOT |
| val hiBits = x & "h_ffff_0000".U      | Bitwise AND |
| val flagsOut = flagsIn \vert overflow | Bitwise OR  |
| val flagsOut = flagsIn ^ toggle       | Bitwise XOR |
** 按位归约运算(Bitwise reductions)
对 SInt UInt 类型有效，返回 Bool 类型。

| Operation           | Explanation   |
|---------------------+---------------|
| val allSet = x.andR | AND reduction |
| val anySet = x.orR  | OR reduction  |
| val parity = x.xorR | XOR reduction |
**  比较是否相等
对 SInt, UInt, and Bool 类型有效，返回 Bool 类型。

| Operation         | Explanation |
|-------------------+-------------|
| val equ = x === y | Equality    |
| val neq = x =/= y | Inequality  |
** 移位运算
对 SInt and UInt 有效

| Operation                                 | Explanation                                           |
|-------------------------------------------+-------------------------------------------------------|
| val twoToTheX = 1.S << x                  | Logical shift left                                    |
| val hiBits = x >> 16.U                    | Right shift (logical on UInt and arithmetic on SInt). |
** 按位操作 (Bitfield manipulation)
对 SInt, UInt, and Bool 类型有效。

| Operation                                 | Explanation                                           |
|-------------------------------------------+-------------------------------------------------------|
| val xLSB = x(0)                           | Extract single bit, LSB has index 0.                  |
| val xTopNibble = x(15, 12)                | Extract bit field from end to start bit position.     |
| val usDebt = Fill(3, "hA".U)              | Replicate a bit string multiple times.                |
| val float = Cat(sign, exponent, mantissa) | Concatenates bit fields, with first argument on left. |
** 逻辑运算
对 Bool 类型有效。

| Operation                                 | Explanation                                 |
|-------------------------------------------+---------------------------------------------|
| val sleep = !busy                         | Logical NOT                                 |
| val hit = tagMatch && valid               | Logical AND                                 |
| val stall = src1busy \vert \vert src2busy | Logical OR                                  |
| val out = Mux(sel, inTrue, inFalse)       | Two-input mux where sel is a Bool           |
** 算术运算
对 SInt and UInt 有效。

| Operation                             | Explanation                                 |
|---------------------------------------+---------------------------------------------|
| val sum = a + b or val sum = a +% b   | Addition (without width expansion)          |
| val sum = a +& b                      | Addition (with width expansion)             |
| val diff = a - b or val diff = a -% b | Subtraction (without width expansion)       |
| val diff = a -& b                     | Subtraction (with width expansion)          |
| val prod = a * b                      | Multiplication                              |
| val div = a / b                       | Division                                    |
| val mod = a % b                       | Modulus                                     |
** 算术比较
对 SInt and UInt 有效，返回 Bool 类型。

| Operation                             | Explanation                                 |
|---------------------------------------+---------------------------------------------|
| val gt = a > b                        | Greater than                                |
| val gte = a >= b                      | Greater than or equal                       |
| val lt = a < b                        | Less than                                   |
| val lte = a <= b                      | Less than or equal                          |

* 集合类数据类型
~Bundle~ 和 ~Vec~ 是两个创建集合类数据类型的类。
** Bundle
通过继承 ~Bundle~ 类来构建自定义的数据集合类型。

#+begin_src scala
  class BusBundle(addr_w: Int, data_w: Int) extends Bundle {
    val valid = Input(Bool())
    val addr  = Input(UInt(addr_w.W))
    val wdata = Input(UInt(data_w.W))
    val rdata = Output(UInt(data_w.W))
    val ready = Output(Bool())
  }
#+end_src

#+begin_src scala
  class Master(addr_w: Int, data_w: Int) extends ExtModule(
    Map(
      "AW" -> addr_w,
      "DW" -> data_w,
    )
  )
  {
    val bus = IO(new BusBundle(addr_w, data_w))
  }
#+end_src

#+begin_src scala
  class Slave(addr_w: Int, data_w: Int) extends ExtModule(
    Map(
      "AW" -> addr_w,
      "DW" -> data_w,
    )
  )
  {
    val bus = IO(Flipped(new BusBundle(addr_w, data_w)))
  }
#+end_src

#+begin_src scala
  class Top extends RawModule {
    val master = Module(new Master(32, 32))
    val slave = Module(new Slave(32, 32))

    master.bus <> slave.bus
  }
#+end_src

#+begin_src verilog
module Top(
);
  wire  master_bus_valid;
  wire [31:0] master_bus_addr;
  wire [31:0] master_bus_wdata;
  wire [31:0] master_bus_rdata;
  wire  master_bus_ready;
  wire  slave_bus_valid;
  wire [31:0] slave_bus_addr;
  wire [31:0] slave_bus_wdata;
  wire [31:0] slave_bus_rdata;
  wire  slave_bus_ready;
  Master #(.AW(32), .DW(32)) master (
    .bus_valid(master_bus_valid),
    .bus_addr(master_bus_addr),
    .bus_wdata(master_bus_wdata),
    .bus_rdata(master_bus_rdata),
    .bus_ready(master_bus_ready)
  );
  Slave #(.AW(32), .DW(32)) slave (
    .bus_valid(slave_bus_valid),
    .bus_addr(slave_bus_addr),
    .bus_wdata(slave_bus_wdata),
    .bus_rdata(slave_bus_rdata),
    .bus_ready(slave_bus_ready)
  );
  assign master_bus_valid = slave_bus_valid;
  assign master_bus_addr = slave_bus_addr;
  assign master_bus_wdata = slave_bus_wdata;
  assign slave_bus_rdata = master_bus_rdata;
  assign slave_bus_ready = master_bus_ready;
endmodule
#+end_src

** Vec
#+begin_src scala
  class Master extends ExtModule {
    val bus = IO(Output(Vec(3, UInt(32.W))))
  }
#+end_src

#+begin_src scala
  class Top extends RawModule {
    val out = IO(Output(Vec(3, UInt(32.W))))

    val master = Module(new Master)

    master.bus <> out
  }
#+end_src

#+begin_src verilog
module Top(
  output [31:0] out_0,
  output [31:0] out_1,
  output [31:0] out_2
);
  wire [31:0] master_bus_0;
  wire [31:0] master_bus_1;
  wire [31:0] master_bus_2;
  Master master (
    .bus_0(master_bus_0),
    .bus_1(master_bus_1),
    .bus_2(master_bus_2)
  );
  assign out_0 = master_bus_0;
  assign out_1 = master_bus_1;
  assign out_2 = master_bus_2;
endmodule
#+end_src

* 条件判断
** Mux
#+begin_src scala
class Top extends RawModule {
  val sel = IO(Input(Bool()))
  val in0 = IO(Input(UInt(1.W)))
  val in1 = IO(Input(UInt(1.W)))
  val out = IO(Output(UInt(1.W)))

  out := Mux(sel, in0, in1)
}
#+end_src

#+begin_src verilog
module Top(
  input   sel,
  input   in0,
  input   in1,
  output  out
);
  assign out = sel ? in0 : in1;
endmodule
#+end_src
** MuxCase
#+begin_src scala
  class Top extends RawModule {
    val sel = IO(Input(UInt(2.W)))
    val in = IO(Input(UInt(4.W)))
    val out = IO(Output(UInt(1.W)))

    out := MuxCase(0.B, Seq(
      (sel === 0.U) -> in(0),
      (sel === 1.U) -> in(1),
      (sel === 2.U) -> in(2),
      (sel === 3.U) -> in(3),
    ))
  }
#+end_src

#+begin_src verilog
module Top(
  input  [1:0] sel,
  input  [3:0] in,
  output       out
);
  wire  _out_T = sel == 2'h0;
  wire  _out_T_2 = sel == 2'h1;
  wire  _out_T_4 = sel == 2'h2;
  wire  _out_T_6 = sel == 2'h3;
  wire  _out_T_9 = _out_T_4 ? in[2] : _out_T_6 & in[3];
  wire  _out_T_10 = _out_T_2 ? in[1] : _out_T_9;
  assign out = _out_T ? in[0] : _out_T_10;
endmodule
#+end_src
** When

#+begin_src scala
class Top extends RawModule {
  val sel = IO(Input(UInt(2.W)))
  val in = IO(Input(UInt(4.W)))
  val out = IO(Output(UInt(1.W)))

  when (sel === 0.U) {
    out := in(0)
  } .elsewhen (sel === 1.U) {
    out := in(1)
  } .elsewhen (sel === 2.U) {
    out := in(2)
  } .elsewhen (sel === 3.U) {
    out := in(3)
  } .otherwise {
    out := in(0)
  }
}
#+end_src

#+begin_src verilog
module Top(
  input  [1:0] sel,
  input  [3:0] in,
  output       out
);
  wire  _GEN_0 = sel == 2'h3 ? in[3] : in[0];
  wire  _GEN_1 = sel == 2'h2 ? in[2] : _GEN_0;
  wire  _GEN_2 = sel == 2'h1 ? in[1] : _GEN_1;
  assign out = sel == 2'h0 ? in[0] : _GEN_2;
endmodule
#+end_src

#+begin_src scala
class Top extends Module {
  val sel = IO(Input(UInt(2.W)))
  val in = IO(Input(UInt(4.W)))
  val out = IO(Output(UInt(1.W)))

  val out_r = RegInit(0.B)
  out := out_r

  when (sel === 0.U) {
    out_r := in(0)
  } .elsewhen (sel === 1.U) {
    out_r := in(1)
  } .elsewhen (sel === 2.U) {
    out_r := in(2)
  } .elsewhen (sel === 3.U) {
    out_r := in(3)
  } .otherwise {
    out_r := in(0)
  }
}
#+end_src

#+begin_src verilog
module Top(
  input        clock,
  input        reset,
  input  [1:0] sel,
  input  [3:0] in,
  output       out
);
  reg  out_r;
  wire  _GEN_0 = sel == 2'h3 ? in[3] : in[0];
  assign out = out_r;
  always @(posedge clock) begin
    if (reset) begin
      out_r <= 1'h0;
    end else if (sel == 2'h0) begin
      out_r <= in[0];
    end else if (sel == 2'h1) begin
      out_r <= in[1];
    end else if (sel == 2'h2) begin
      out_r <= in[2];
    end else begin
      out_r <= _GEN_0;
    end
  end
endmodule
#+end_src
** Switch
#+begin_src scala
class Top extends Module {
  val sel = IO(Input(UInt(2.W)))
  val in = IO(Input(UInt(4.W)))
  val out = IO(Output(UInt(1.W)))

  val out_r = RegInit(0.B)
  out := out_r

  switch (sel) {
    is (0.U) {
      out_r := in(0)
    }
    is (1.U) {
      out_r := in(1)
    }
    is (2.U) {
      out_r := in(2)
    }
    is (3.U) {
      out_r := in(3)
    }
  }
}
#+end_src

#+begin_src verilog
module Top(
  input        clock,
  input        reset,
  input  [1:0] sel,
  input  [3:0] in,
  output       out
);
  reg  out_r;
  wire  _GEN_0 = 2'h3 == sel ? in[3] : out_r;
  assign out = out_r;
  always @(posedge clock) begin
    if (reset) begin
      out_r <= 1'h0;
    end else if (2'h0 == sel) begin
      out_r <= in[0];
    end else if (2'h1 == sel) begin
      out_r <= in[1];
    end else if (2'h2 == sel) begin
      out_r <= in[2];
    end else begin
      out_r <= _GEN_0;
    end
  end
endmodule
#+end_src
